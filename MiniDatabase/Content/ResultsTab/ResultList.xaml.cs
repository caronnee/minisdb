using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MiniDatabase.Records;
using System.Collections.ObjectModel;
using MiniDatabase.Misc;
using System.Dynamic;

namespace MiniDatabase.Content.ResultsTab
{
  /// <summary>
  /// Interaction logic for ResultList.xaml
  /// </summary>
  public partial class ResultList : RecordableTab
  {
    ObservableCollection<object> Results
    {
      get;
      set;
    }

    public String Question
    {
      get;
      set;
    }

    public object Condition
    {
      get;
      set;
    }

    public ResultList()
    {
      Results = new ObservableCollection<object>();
      MaxPerPage = 100;
      InitializeComponent();
      Question = "Default view";
    }

    public int MaxPerPage
    {
      get;
      set;
    }

    int StartOffset
    {
      get;
      set;
    }


    private void dataGrid1_AutoGeneratedColumns(object sender, EventArgs e)
    {
      var dg = sender as DataGrid;
      var first = dg.ItemsSource.Cast<object>().FirstOrDefault() as DynamicObject;
      if (first == null) return;
      var names = first.GetDynamicMemberNames();
      DataGridLength len = new DataGridLength(1, DataGridLengthUnitType.Star);
      foreach (var name in names)
      {
        dg.Columns.Add(new DataGridTextColumn { Header = name, Binding = new Binding(name), Width=len });
      }
    }

    public void ReloadEntries()
    {
      RecordsManager manager = DataContext as RecordsManager;
      if (DataContext == null)
        return;
      List<Record> l = manager.Select(Condition, StartOffset, MaxPerPage);
      if (l.Count == 0)
      {
        ParentContent.OnInfo("No more entries");
        return;
      }

      List<RecordDescription> d = manager.Description;
      foreach (Record r in l)
      {
        BindableDynamicDictionary o = new BindableDynamicDictionary();
        o["ID"] = r.ID;
        for (int i = 0; i < d.Count; i++)
        {
          o[d[i].Name] = r.GetValue(i);
        }
        Results.Add(o);
      }
    }

    private void InitEntries(object sender, RoutedEventArgs e)
    {
      StartOffset = 0;
      RecordsManager manager = DataContext as RecordsManager;
      if (manager == null)
        return;
      manager.updateAction += new RecordsManager.UpdateHandler(ReloadEntries);
      // generate columns
      DataGrid grid = FindName("EntriesContainer") as DataGrid;
      grid.ItemsSource = Results;
      //for (int i = 0; i < manager.Description.Count; i++)
      //{
      //  DataGridColumn column = new DataGridTextColumn();
      //  column.Header = manager.Description[i].Name;
      //  column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
      //  grid.Columns.Add(column);
      //}
      ReloadEntries();
    }
  }
}
